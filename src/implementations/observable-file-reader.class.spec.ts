import { firstValueFrom, reduce, take } from "rxjs";
import { ObservableFileReaderUtils } from "../../dist";
import { ObservableFileReader } from "../interfaces";
import {
  AbstractObservableFileReader,
  ObservableArrayBufferFromFileReader,
  ObservableDataURLFromFileReader,
  ObservableTextFromFileReader,
} from "./observable-file-reader.class";

describe(`Test of ${AbstractObservableFileReader.name} `, () => {
  const blob = new Blob(["Text file content"], { type: "text/plain" });

  for (const func of Object.values(ObservableFileReaderUtils)) {
    it(`it must return an instance with '${func.name}': `, () =>
      expect(func(blob)).toBeTruthy());
  }

  for (const clazz of [
    ObservableArrayBufferFromFileReader,
    ObservableDataURLFromFileReader,
    ObservableTextFromFileReader,
  ]) {
    it(`it must instantiate with '${clazz.name}'`, () =>
      expect(new clazz(blob)).toBeTruthy());
  }

  for (const func of Object.values(ObservableFileReaderUtils)) {
    describe(`test instance generated by '${func.name}': `, () => {
      let observableFileReader: ObservableFileReader;

      beforeEach(() => (observableFileReader = func(blob)));

      it(`the readyStateList must be: `, (done) => {
        firstValueFrom(
          observableFileReader.readyState$.pipe(
            take(3),
            reduce((acc, e) => [...acc, e], <any>[])
          )
        )
          .then((result) => expect(result).toEqual([0, 1, 2]))
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });

      it(`the loadStart$ must emit: `, (done) => {
        firstValueFrom(observableFileReader.loadStartEvent$)
          .then((event) => {
            expect(event).toBeTruthy();
          })
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });

      it(`the progressEvent$ must emit: `, (done) => {
        firstValueFrom(observableFileReader.progressEvent$)
          .then((progressEvent) => {
            expect(progressEvent).toBeTruthy();
          })
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });

      it(`the loadEndEvent$ must emit: `, (done) => {
        firstValueFrom(observableFileReader.loadEndEvent$)
          .then((progressEvent) => {
            expect(progressEvent).toBeTruthy();
          })
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });

      it(`the loadEvent$ must emit: `, (done) => {
        firstValueFrom(observableFileReader.loadEvent$)
          .then((progressEvent) => {
            expect(progressEvent).toBeTruthy();
          })
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });

      it(`the result$ must emit: `, (done) => {
        firstValueFrom(observableFileReader.result$)
          .then((result) => {
            expect(result).toBeTruthy();
          })
          .then(() => done());

        firstValueFrom(observableFileReader.result$);
      });
    });
  }
});
